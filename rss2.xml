<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>阿东的BLOG</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>阿东的BLOG</description>
    <pubDate>Mon, 27 Sep 2021 14:25:31 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>大一上学期如何自学计算机</title>
      <link>http://example.com/2021/09/27/%E5%A4%A7%E4%B8%80%E4%B8%8A%E5%AD%A6%E6%9C%9F%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA/</link>
      <guid>http://example.com/2021/09/27/%E5%A4%A7%E4%B8%80%E4%B8%8A%E5%AD%A6%E6%9C%9F%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA/</guid>
      <pubDate>Mon, 27 Sep 2021 12:40:29 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;大一上学期如何自学计算机&quot;&gt;&lt;a href=&quot;#大一上学期如何自学计算机&quot; class=&quot;headerlink&quot; title=&quot;大一上学期如何自学计算机&quot;&gt;&lt;/a&gt;大一上学期如何自学计算机&lt;/h1&gt;&lt;p&gt;刚到大一，我们多少有点迷茫，不知道如何学习。&lt;/p&gt;
&lt;p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="大一上学期如何自学计算机"><a href="#大一上学期如何自学计算机" class="headerlink" title="大一上学期如何自学计算机"></a>大一上学期如何自学计算机</h1><p>刚到大一，我们多少有点迷茫，不知道如何学习。</p><p>不过在我回答大家如何学习之前，我得说明一件事情，就是大学四年不同的规划决定了不同的路线，当然，大一完全有机会试错，如果信念坚定，可以一条路走到黑。</p><p>如果你想考研，我的建议就是学好以下课程：：</p><table><thead><tr><th>非计算机科目</th><th>计算机科目</th></tr></thead><tbody><tr><td>高等数学</td><td>数据结构</td></tr><tr><td>线性代数</td><td>计算机原理</td></tr><tr><td>概率论</td><td>操作系统</td></tr><tr><td>大学英语</td><td>计算机网络</td></tr><tr><td>思修，毛概，马克思理论，近现代史</td><td>一门计算机编程语言</td></tr></tbody></table><p>这些都在考研的时候涉及到，考研很苦的，一般大二下开始了解，大三开始准备复习，大四上学期开始拼命学习，大四上学期十二月份考研。</p><p>大一大二可以接触一下自己感兴趣的，这样大学四年也够充实。</p><hr><p>如果你想保研，我的建议是：在大一疯狂学习，尽自己最大努力学好开课的所有课程，然后大一下找老师了解清况，看有没有老师愿意带你。</p><p>保研有一种情况就是成绩专业第一，基本上肯定可以保研。</p><p>如果成绩在40%，也有机会保研，但必须有好成绩，不能挂超过两门的科目，然后要有竞赛(我们软件协会一个大的方向就是大二的可以参加各种竞赛(没有ACM的比赛，ACM比赛主要由ACM负责)，然后竞赛的种类也比较多，比如湖南省物联网比赛，服务创新大赛，程序设计竞赛应用开发类竞赛，拟发展网络攻防大赛)。</p><hr><p>然后还有写论文，这个就难度大了，没老师带你，基本不可能自己写。所以这个方面现在了解有点太早，可以大一下跟我们协会有这方面经验的学长了解一下，大一搞好学习。</p><p>最后一条路，就是就业。考研的同学可以了解一下就业，如果就业条件好也许就不用考研了，保研的同学完全没必要，如果铁了心要保研，了解就业完全学习时间。</p><p>就业现在跟大家讲还是太早了，所以我们说回我们的主题，如何在大一上学期学好计算机。</p><hr><p>大学四年我们学校语言学习路线：</p><p>开始学习C语言(面向过程语言)——&gt;学习C++(面向对象语言)——&gt;学习Java(面向对象语言)——&gt;学习JavaEE(Java的进阶学习)——&gt;学习Python</p><p>也就是说，我们大学四年要学习四门语言，但其实我们在以后的工作中，基本上只会使用一种到两种的语言，所以我们学习这些语言要有一定的取舍。</p><p>首先肯定不要第一门语言学习Python，因为Python是一门<strong>弱类型</strong>语言，语法很随意，学这个用的习惯以后学习其他<strong>强类型</strong>语言会很痛苦。强类型和弱类型语言这边不解释，以后有机会可以询问我。</p><p>所以我们首先要学习的是C语言，然后是 C++,但是你会发现，除了C语言之外全是面向对象语言，所以我们如果以后想要搞明白Java，肯定要把面向对象搞明白，这时候大家就很疑惑了，什么是面向过程什么是面向对象，这个我以后专门写一篇文章来讲一下。</p><p>所以很推荐大家学习C++，因为我们20级软件工程大一的时候刚开学直接学的C++，很明显，学校也觉得这种方式很不错。其实学习C++的原因还是C语言实在太难用了，如果你对它很熟悉，那你不会觉得难用，如果你像我这样先学C++再去了解C语言，会很痛苦。你以后写算法，C语言肯定可以写，但是C++写算法对于我们高中没基础过编程的同学很友好。因为它封装了很多函数库，比如<strong>开方计算</strong>，<strong>排序</strong>，<strong>去重</strong>，让你自己实现这些算法难度还是有一点的。但是你可以用这些封装好的算法直接完成你的算法题目，完全是可以的。</p><p>这只是我们第一学期的内容，如果你能够把C++学好且做一点算法题，那么你这一学期很有收获。当然，学C语言然后再去学C++也一样。</p><p><strong>注意：这里的建议是我的一家之言，大家在接受之前希望问问其他学长学姐以及网上一些知识，混合接受才不会有信息差。</strong></p><p>说完我们第一学期学习的学习路线，我们讲讲如何获取资源。</p><p>这就不得不讲哔哩哔哩大学了，如果不是B站不发毕业证我都不来林科大了。</p><p>C语言可以在B站看<strong>翁铠C语言</strong>，这个我没看过但是我听过这个大名，完全可以学习。</p><p>C++语言可以在B站看<strong>黑马程序员的C++</strong>,搜C++然后找黑马程序员就可以</p><p>这里讲一下，视频都只是推荐，如果我推荐的你觉得不好可以找自己觉得好的视频，然后还可以给我发一下，我好推荐给其他人。</p><p>B站基本上可以解决你学习视频的大部分困惑与不解</p><p>除了B站还有MOOC慕课网，这里有很多名牌大学的公开课</p><p>推荐几个课程：</p><p><a href="https://www.icourse163.org/course/ZJU-1001614008">C语言程序设计CAP_浙江大学_中国大学MOOC(慕课) (icourse163.org)</a></p><p><a href="https://www.icourse163.org/course/ZJU-200001">C语言程序设计进阶_浙江大学_中国大学MOOC(慕课) (icourse163.org)</a></p><p><a href="https://www.zhihu.com/zvideo/1351617689794777088">(15 封私信 / 22 条消息) C++程序设计精要教程第01讲 - 知乎 (zhihu.com)</a></p><p>然后是书籍推荐：</p><p>C语言：<strong>C primer</strong> 以及 <strong>c primer plus</strong> 这是两本名字相似完全不是一个作者写的书，c primer更像一个字典，是最经典的C语言数据c primer plus阅读体验稍好。</p><p>想学号指针可以看：<strong>C与指针</strong></p><p>C++语言：<strong>C++ primer</strong> ，<strong>C++ primer plus</strong>，<strong>Effective C++<strong>，</strong>Effective STL</strong>、因为我是学习C++的所以C++的推荐多一些。</p><p>那么讲了这么多，我们这段时间如何做：</p><p>我不给大家定学习方向，但是我有以下的建议，这个建议大概是最近一个月的内容，我只是建议，大家可以根据自己的学习进度调整。</p><p><strong>第一周：</strong></p><p><strong>我们第一周的学习，基本上老师也不会教你啥，就是介绍介绍语言然后学习进制转换，然后编写一个简单的Helloworld的代码。我们完全可以自己在B站或者其他的资源网站学习这些内容，然后有什么不解的在上C语言课下课的时候去问老师。第一周我们也没必要急，学会二进制是什么东西，二进制如何转换十进制，以及任意进制的互相转换。然后就是各种数据类型，了解和理解它们。比如char，int，long，float这些数据类型。</strong></p><p><strong>第二周：</strong></p><p><strong>第二周我们可以学习一下流程控制（if,for,while）这些关键字的使用。除了这些内容还有其他的一些知识，比如C语言或者C++语言的输入输出。不要小看这些知识，很重要，是以后编程的基础。</strong></p><p><strong>第三周：</strong></p><p><strong>我们可以接触一下数组的内容，数组学完我们就可以做一些简单的算法题，这时候大家应该正式加入了软件协会，软件协会也会相对应给大家提供一些题目来帮助大家来熟悉这些内容的使用。</strong></p><p><strong>第四周：</strong></p><p><strong>先别着急学习新的知识，这一个月我们其实学了很多我刚才没提到的内容，比如前置++以及后置++，还有各种逻辑判断符号比如：&amp;&amp;（且）||（或）!（非）</strong></p><p><strong>我们要深刻理解这些，我们这时候完全可以通过做算法题来巩固我们学习的知识。我们学C或者C++其实做不了什么项目，但是做算法题这两个语言很好用，既可以提升自己的逻辑能力已经算法水平又锻炼了敲代码的能力。有能力的同学可以在这时候去参加ACM的比赛，如果能力足够可以加入集训队。</strong></p><p>然后是一些其他内容：</p><p>刚上大一，有明确的目标是一件很好的事情。但是切忌本科阶段急功近利，被一些实用技术蒙蔽而忽略打好扎实的基础。</p><p><strong>认真学习学校计算机基础课</strong></p><p>要做到认真独立完成学校计算机基础课的所有编程练习，并尽可能给自己提出更高的要求。如果不是很满足学校课程的教学内容，可以自行搜寻国际知名课程公开课，如 15-213(深入理解计算机系统的CMU课程) 、CS231(计算机视觉与深度学习经典课程)等，<strong>并认真完成课程作业。</strong>对于计算机学科来说，再怎么强调实践也不为过。</p><p><strong>利用开源社区与论坛，广泛接触工业界技术</strong></p><p>知乎其实是个不错的平台，只要你关注的人正确，还是能在这里收获到很多的技术干货。还有Github，不要大二大三了连github都不知道。没事儿的时候就可以上去逛逛。可以看看行业内领头企业开源出的代码，可以不用看懂这些代码在干什么，注意看开源代码的排版、命名，从与业务逻辑无关的工具函数看起，能大大提高你的编码水平。</p><p>最后说一下：</p><p>1、一定要提前学习，尽可能哪空余时间去学习。C++尽量这学期能学完并且做点小项目锻炼一下能力</p><p>2、多敲代码、多敲代码、多敲代码、重要的事情说三遍！前期可以做点小算法，来锻炼自己的代码能力。一定要多敲代码，你安身立命的技能就是你能敲代码。</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/C/">C</category>
      
      
      <comments>http://example.com/2021/09/27/%E5%A4%A7%E4%B8%80%E4%B8%8A%E5%AD%A6%E6%9C%9F%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>大一问题解惑</title>
      <link>http://example.com/2021/09/26/%E5%A4%A7%E4%B8%80%E9%97%AE%E9%A2%98%E8%A7%A3%E6%83%91/</link>
      <guid>http://example.com/2021/09/26/%E5%A4%A7%E4%B8%80%E9%97%AE%E9%A2%98%E8%A7%A3%E6%83%91/</guid>
      <pubDate>Sun, 26 Sep 2021 15:06:27 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;大一的一些疑问&quot;&gt;&lt;a href=&quot;#大一的一些疑问&quot; class=&quot;headerlink&quot; title=&quot;大一的一些疑问&quot;&gt;&lt;/a&gt;大一的一些疑问&lt;/h1&gt;&lt;h2 id=&quot;1、C语言和C-语言到底有什么区别&quot;&gt;&lt;a href=&quot;#1、C语言和C-语言到底有什么区</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="大一的一些疑问"><a href="#大一的一些疑问" class="headerlink" title="大一的一些疑问"></a>大一的一些疑问</h1><h2 id="1、C语言和C-语言到底有什么区别"><a href="#1、C语言和C-语言到底有什么区别" class="headerlink" title="1、C语言和C++语言到底有什么区别"></a>1、C语言和C++语言到底有什么区别</h2><p>📃这个问题我可以百度一个非常标准的答案，但是有点晦涩难懂，如果大家开始学习的语言是C++语言，那么刚开始接触的知识跟C语言基本上一模一样，但毕竟是C++,多少有点区别。但是大家刚开始学的是C语言，但是大一下肯定会接触C++，其实可以在大一上的时候学习一下C++,对于没接触过编程语言的人来说，C++语言写算法比较方便，封装了很多数据结构我们可以直接拿来使用。可以很大程度提高我们的水平，当然这只是相对来说！</p><p>📃我给大家写两个语言的hello world来展现一下两个语言刚开始学习微弱的区别。</p><p><strong>C语言</strong></p><pre><code>#include&lt;stdio.h&gt;void main()&#123;    printf(&quot;Hello, world\n&quot;);    return 0;&#125;</code></pre><p><strong>C++</strong></p><pre><code>#include&lt;iostream&gt;using namespace std;int mian()&#123;    cout&lt;&lt;&quot;Hello World&quot;&lt;&lt;endl;    return 0;&#125;</code></pre><p>C语言和C++语言在我们刚接触的时候，估计一个月之内的课，这就是他们最大的区别。一</p><p>👉一个是头文件#include&lt;stdio.h&gt;—C语言</p><p>👉一个是头文件#include<iostream>—C++</p><p><strong>这个从我们的知识来说</strong>（本质是有区别的），只是写法上不同（但是我们暂时没必要理解的那么深），他们的含义都是包含你待会要使用的函数库，当然，两个头文件里面包含的函数库也不同，所以导致下面的区别</p><p>👉一个是向控制台输入的语法printf()—C语言</p><p>👉一个是向控制台输入的语法cout&lt;&lt;—C++</p><p>💌因为我们引用的头文件不同导致包含的函数不同所以使用的输出语法不同，但是他们都可以打成向控制台输出数据：</p><p><strong>Hello World</strong></p><p><strong>注意</strong>：这个只是你初学的时候C语言和C++语言的不同，🌱本质上C++完全是一个新的语言，后面会有大量不一样的地方，🔑 但是刚开始学习我们没必要看那么远，只需要知道这两个语言刚开始学的时候是很像的！</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/C/">C</category>
      
      
      <comments>http://example.com/2021/09/26/%E5%A4%A7%E4%B8%80%E9%97%AE%E9%A2%98%E8%A7%A3%E6%83%91/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java常用类</title>
      <link>http://example.com/2021/09/26/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/</link>
      <guid>http://example.com/2021/09/26/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/</guid>
      <pubDate>Sun, 26 Sep 2021 09:25:14 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Java常用类的使用&quot;&gt;&lt;a href=&quot;#Java常用类的使用&quot; class=&quot;headerlink&quot; title=&quot;Java常用类的使用&quot;&gt;&lt;/a&gt;Java常用类的使用&lt;/h1&gt;&lt;h2 id=&quot;1、字符串相关的类&quot;&gt;&lt;a href=&quot;#1、字符串相关的类&quot; c</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Java常用类的使用"><a href="#Java常用类的使用" class="headerlink" title="Java常用类的使用"></a>Java常用类的使用</h1><h2 id="1、字符串相关的类"><a href="#1、字符串相关的类" class="headerlink" title="1、字符串相关的类"></a>1、字符串相关的类</h2><p>String类是一个final类，代表不可变的字符序列</p><p>字符串是常量，用双引号引起来表示。它们的值在创建以后不能更改</p><p>String对象的字符内容是储存在一个字符数组value[]中的</p><pre><code class="Java">public final class String    implements java.io.Serializable,Comparable&lt;String&gt;,Charsequence&#123;    //value用于字符存储    private final char value[];    //缓存字符串的哈希代码    private int hash;//Default to 0&#125;</code></pre><p>String实现了Serializable接口：表示字符串是支持序列化的</p><p>​            实现了Comparable接口：表示String可以比较大小</p><p>String：代表不可变的字符序列。简称：不可变性</p><p>​                体现：1.对字符串重新赋值是，需要重写指定内存区域赋值，不能使用原有的value进行赋值</p><p>​                            2.当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能在原有的value进行赋值</p><p>​                            3.当调用String的replace()的方法修改指定字符或者字符串时，也需要重新指定内存区域赋值，不能在原有的value进行赋值</p><pre><code class="Java">public void test()&#123;    String s1=&quot;abc&quot;;    String s2=&quot;abc&quot;;    s1=&quot;hello&quot;;    //s1和s2刚开始是共享同一块地址区域的数据abc，现在s1的值改变，本质上是重新在另一块区域赋值    //s2仍然指向原来的地址的值    System.out.println(s1);//hello    System.out.println(s1);//abc        String s3=&quot;abc&quot;;    s3+=&quot;def&quot;;      //此时的s3是重新找了一块区域进行了连接，原来的abc没有改变，提现了值的不可变性    System.out.println(s3);//abcdef        String s5=s2.replace(&#39;a&#39;,&#39;m&#39;);    System.out.println(s2);//abc    System.out.println(s4);//mbc&#125;</code></pre><p>通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中</p><p>字符串常量池中是不会储存相同内容字符串的</p><h3 id="String对象的创建"><a href="#String对象的创建" class="headerlink" title="String对象的创建"></a><strong>String对象的创建</strong></h3><pre><code class="java">String str = &quot;hello&quot;;//本质上this.value = new char[0];String s1 = new String(); //this.value = original.value;String s2 = new String(String original); //this.value = Arrays.copyOf(value, value.length);String s3 = new String(char[] a); String s4 = new String(char[] a,int startIndex,int count);</code></pre><p>除了以上的构造器，还有很多构造器没有列出</p><p>String实例化的方式：</p><p>1、通过字面量定义的方式</p><p>2、通过new+构造器的方式</p><p>String str1 = “abc”;与String str2 = new String(“abc”);的区别？</p><ol><li>字符串常量存储在字符串常量池，目的是共享</li><li>字符串非常量对象存储在堆中</li></ol><pre><code class="java">  public void test2()&#123;        //通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中。        String s1 = &quot;javaEE&quot;;        String s2 = &quot;javaEE&quot;;        //通过new + 构造器的方式:此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。        String s3 = new String(&quot;javaEE&quot;);        String s4 = new String(&quot;javaEE&quot;);        System.out.println(s1 == s2);//true        System.out.println(s1 == s3);//false        System.out.println(s1 == s4);//false        System.out.println(s3 == s4);//false        System.out.println(&quot;***********************&quot;);        Person p1 = new Person(&quot;Tom&quot;,12);        Person p2 = new Person(&quot;Tom&quot;,12);        System.out.println(p1.name.equals(p2.name));//true        System.out.println(p1.name == p2.name);//true        p1.name = &quot;Jerry&quot;;        System.out.println(p2.name);//Tom    &#125;</code></pre><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><strong>1.常量与常量的拼接结果在常量池，且常量池中不会存在相同内容的常量。</strong></p><p><strong>2.只要其中有一个是变量，结果就在堆中</strong></p><p><strong>3.如果拼接的结果调用intern()方法，返回值就在常量池中</strong></p><h3 id="String使用陷阱"><a href="#String使用陷阱" class="headerlink" title="String使用陷阱"></a>String使用陷阱</h3><p>String s1 = “a”;<br>说明：在字符串常量池中创建了一个字面量为”a”的字符串</p><p>s1 = s1 + “b”;<br>说明：实际上原来的“a”字符串对象已经丢弃了，现在在堆空间中产生了一个字符<br>串s1+”b”（也就是”ab”)。如果多次执行这些改变串内容的操作，会导致大量副本<br>字符串对象存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响<br>程序的性能</p><p> String s2 = “ab”;<br>说明：直接在字符串常量池中创建一个字面量为”ab”的字符串。</p><p>String s3 = “a” + “b”;<br>说明：s3指向字符串常量池中已经创建的”ab”的字符串</p><p>String s4 = s1.intern();<br>说明：堆空间的s1对象在调用intern()之后，会将常量池中已经存在的”ab”字符串<br>赋值给s4</p><h3 id="String类及常用方法"><a href="#String类及常用方法" class="headerlink" title="String类及常用方法"></a>String类及常用方法</h3><pre><code class="java">int length()    //返回字符串的长度： return value.length    char charAt(int index)    //返回某索引处的字符return value[index]    boolean isEmpty()    //判断是否是空字符串：return value.length == 0    String toLowerCase()    //使用默认语言环境，将 String 中的所有字符转换为小写    String toUpperCase()    //使用默认语言环境，将 String 中的所有字符转换为大写    String trim()    //返回字符串的副本，忽略前导空白和尾部空白    boolean equals(Object obj)    //比较字符串的内容是否相同    boolean equalsIgnoreCase(String anotherString)    //与equals方法类似，忽略大小写    String concat(String str)    //将指定字符串连接到此字符串的结尾。 等价于用“+”    int compareTo(String anotherString)    //比较两个字符串的大小    String substring(int beginIndex)    //返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。    String substring(int beginIndex, int endIndex)    //返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串    boolean endsWith(String suffix)    //测试此字符串是否以指定的后缀结束    boolean startsWith(String prefix)    //测试此字符串是否以指定的前缀开始    boolean startsWith(String prefix, int toffset)    //测试此字符串从指定索引开始的子字符串是否以指定前缀开始    boolean contains(CharSequence s)    //当且仅当此字符串包含指定的 char 值序列时，返回 true    int indexOf(String str)    //返回指定子字符串在此字符串中第一次出现处的索引    int indexOf(String str, int fromIndex)    //返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始    int lastIndexOf(String str)    //返回指定子字符串在此字符串中最右边出现处的索引    int lastIndexOf(String str, int fromIndex)    //返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索    //注：indexOf和lastIndexOf方法如果未找到都是返回-1    //替换：String replace(char oldChar, char newChar)    //一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。    String replace(CharSequence target, CharSequence replacement)    //指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。    String replaceAll(String regex, String replacement)    //给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。    String replaceFirst(String regex, String replacement)    //给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。    //匹配:boolean matches(String regex)    //此字符串是否匹配给定的正则表达式。    //切片：String[] split(String regex)    //给定正则表达式的匹配拆分此字符串。    String[] split(String regex, int limit)    //匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部</code></pre><h4 id="String和基本数据类型以及基本数据类型包装类的相互转化"><a href="#String和基本数据类型以及基本数据类型包装类的相互转化" class="headerlink" title="String和基本数据类型以及基本数据类型包装类的相互转化"></a>String和基本数据类型以及基本数据类型包装类的相互转化</h4><p>String转基本数据类型(只能通过基本数据类型包装类来调用静态方法来转换)</p><pre><code class="java">String str=&quot;123&quot;;int num=Integer.praseInt(str);</code></pre><p>1.基本数据类型转String通过String重载的valueOf()方法实现</p><p>2.也可以通过在数据类型尾部+“”的方式来转换</p><pre><code class="java">String str=String.valueOf(num);String str=num+&quot;&quot;;//这种方式创建的字符串在堆区</code></pre><h4 id="String和Char数组之间的转换"><a href="#String和Char数组之间的转换" class="headerlink" title="String和Char数组之间的转换"></a>String和Char数组之间的转换</h4><pre><code>String --&gt; char[]:调用String的toCharArray()char[] --&gt; String:调用String的构造器</code></pre><pre><code class="java">  public void test2()&#123;        String str1 = &quot;abc123&quot;;         char[] charArray = str1.toCharArray();        for (int i = 0; i &lt; charArray.length; i++) &#123;            System.out.println(charArray[i]);        &#125;        char[] arr = new char[]&#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;&#125;;        String str2 = new String(arr);        System.out.println(str2);    &#125;</code></pre><h4 id="String-与-byte-之间的转换"><a href="#String-与-byte-之间的转换" class="headerlink" title="String 与 byte[]之间的转换"></a>String 与 byte[]之间的转换</h4><pre><code>编码：String --&gt; byte[]:调用String的getBytes()解码：byte[] --&gt; String:调用String的构造器编码：字符串 --&gt;字节  (看得懂 ---&gt;看不懂的二进制数据)解码：编码的逆过程，字节 --&gt; 字符串 （看不懂的二进制数据 ---&gt; 看得懂）说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</code></pre><pre><code class="java">@Testpublic void test3() throws UnsupportedEncodingException &#123;    String str1 = &quot;abc123中国&quot;;    byte[] bytes = str1.getBytes();//使用默认的字符集，进行编码。    System.out.println(Arrays.toString(bytes));    byte[] gbks = str1.getBytes(&quot;gbk&quot;);//使用gbk字符集进行编码。    System.out.println(Arrays.toString(gbks));    System.out.println(&quot;******************&quot;);    String str2 = new String(bytes);//使用默认的字符集，进行解码。    System.out.println(str2);    String str3 = new String(gbks);    System.out.println(str3);//出现乱码。原因：编码集和解码集不一致！        String str4 = new String(gbks, &quot;gbk&quot;);    System.out.println(str4);//没有出现乱码。原因：编码集和解码集一致！&#125;</code></pre><h3 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h3><h4 id="String、StringBuffer、StringBuilder三者的异同？"><a href="#String、StringBuffer、StringBuilder三者的异同？" class="headerlink" title="String、StringBuffer、StringBuilder三者的异同？"></a>String、StringBuffer、StringBuilder三者的异同？</h4><pre><code>String:不可变的字符序列；底层使用char[]存储StringBuffer:可变的字符序列；线程安全的，效率低；底层使用char[]存储StringBuilder:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储</code></pre><p>源码分析</p><pre><code class="java">String str = new String();//char[] value = new char[0];String str1 = new String(&quot;abc&quot;);//char[] value = new char[]&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;&#125;;StringBuffer sb1 = new StringBuffer();//char[] value = new char[16];底层创建了一个长度是16的数组。      System.out.println(sb1.length());    sb1.append(&#39;a&#39;);//value[0] = &#39;a&#39;;    sb1.append(&#39;b&#39;);//value[1] = &#39;b&#39;;StringBuffer sb2 = new StringBuffer(&quot;abc&quot;);//char[] value = new char[&quot;abc&quot;.length() + 16];</code></pre><pre><code>//问题1. System.out.println(sb2.length());//3//问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。         默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。        指导意义：开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)</code></pre><h4 id="StringBuffer的常用方法："><a href="#StringBuffer的常用方法：" class="headerlink" title="StringBuffer的常用方法："></a>StringBuffer的常用方法：</h4><pre><code class="java">StringBuffer append(xxx)    //提供了很多的append()方法，用于进行字符串拼接    StringBuffer delete(int start,int end)//指定位置的内容    StringBuffer replace(int start, int end, String str)    //把[start,end)位置替换为str       StringBuffer insert(int offset, xxx)    //在指定位置插入xxx    StringBuffer reverse()     //把当前字符序列逆转    public int indexOf(String str)    //查找匹配的子串    public String substring(int start,int end)    //返回一个从start开始到end索引结束的左闭右开区间的子字符串    public int length()    //返回字符串长度    public char charAt(int n )    //字符串的数组用法    public void setCharAt(int n ,char ch)</code></pre><p>通过IDEA来运行String，StringBuffer，StringBuilder来对比运行时间</p><pre><code class="java">StringBuffer 执行时间：10StringBuilder 执行时间：3String 执行时间：667</code></pre><h2 id="2、JDK-8之前的日期时间API"><a href="#2、JDK-8之前的日期时间API" class="headerlink" title="2、JDK 8之前的日期时间API"></a>2、JDK 8之前的日期时间API</h2><h3 id="System静态方法"><a href="#System静态方法" class="headerlink" title="System静态方法"></a>System静态方法</h3><pre><code class="java">public void test1()&#123;    long time = System.currentTimeMillis();    //返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。    //称为时间戳    System.out.println(time);&#125;</code></pre><h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><p>java.util.Date类</p><p>java.sql.Date类(父类为java.util.Date)</p><pre><code>1.两个构造器的使用    &gt;构造器一：Date()：创建一个对应当前时间的Date对象    &gt;构造器二：创建指定毫秒数的Date对象2.两个方法的使用    &gt;toString():显示当前的年、月、日、时、分、秒    &gt;getTime():获取当前Date对象对应的毫秒数。（时间戳）3. java.sql.Date对应着数据库中的日期类型的变量    &gt;如何实例化    &gt;如何将java.util.Date对象转换为java.sql.Date对象</code></pre><pre><code class="java"> public void test2()&#123;        //构造器一：Date()：创建一个对应当前时间的Date对象        Date date1 = new Date();        System.out.println(date1.toString());//Sat Feb 16 16:35:31 GMT+08:00 2019        System.out.println(date1.getTime());//1550306204104        //构造器二：创建指定毫秒数的Date对象        Date date2 = new Date(155030620410L);        System.out.println(date2.toString());        //创建java.sql.Date对象        java.sql.Date date3 = new java.sql.Date(35235325345L);        System.out.println(date3);//1971-02-13        //如何将java.util.Date对象转换为java.sql.Date对象        //情况一：         //Date date4 = new java.sql.Date(2343243242323L);        //java.sql.Date date5 = (java.sql.Date) date4;        //情况二：        Date date6 = new Date();        java.sql.Date date7 = new java.sql.Date(date6.getTime());    &#125;</code></pre><h3 id="Calendar类-日历类"><a href="#Calendar类-日历类" class="headerlink" title="Calendar类(日历类)"></a>Calendar类(日历类)</h3><p> Calendar是一个抽象基类，主用用于完成日期字段之间相互操作的功能。</p><p><strong> 获取Calendar实例的方法</strong></p><pre><code>1.使用Calendar.getInstance()方法2.调用它的子类Gregorian Calendar的构造器。</code></pre><p> Calendar是一个抽象基类，主用用于完成日期字段之间相互操作的功能。</p><pre><code class="java">1、public void set(int field,int value)2、public void add(int field,int amount)3、public final Date getTime()4、public final void setTime(Date date) </code></pre><p> 注意: 获取月份时：一月是0，二月是1，以此类推，12月是11<br> 获取星期时：周日是1，周二是2 ， 。。。。周六是7</p><h3 id="SimpleDateFormate类"><a href="#SimpleDateFormate类" class="headerlink" title="SimpleDateFormate类"></a>SimpleDateFormate类</h3><p>SimpleDateFormat的使用：SimpleDateFormat对日期Date类的格式化和解析</p><p><strong>两个操作：</strong></p><pre><code>1. 格式化：日期 ---&gt;字符串2.解析：格式化的逆过程，字符串 ---&gt; 日期</code></pre><p>SimpleDateFormat的实例化</p><pre><code class="java">public void testSimpleDateFormat() throws ParseException &#123;        //实例化SimpleDateFormat:使用默认的构造器        SimpleDateFormat sdf = new SimpleDateFormat();        //格式化：日期 ---&gt;字符串        Date date = new Date();        System.out.println(date);        String format = sdf.format(date);        System.out.println(format);        //解析：格式化的逆过程，字符串 ---&gt; 日期        String str = &quot;19-12-18 上午11:43&quot;;        Date date1 = sdf.parse(str);        System.out.println(date1);        //*************按照指定的方式格式化和解析：调用带参的构造器*****************        //SimpleDateFormat sdf1 = new SimpleDateFormat(&quot;yyyyy.MMMMM.dd GGG hh:mm aaa&quot;);        SimpleDateFormat sdf1 = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);        //格式化            String format1 = sdf1.format(date);        System.out.println(format1);//2019-02-18 11:48:27        //解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),        //否则，抛异常        Date date2 = sdf1.parse(&quot;2020-02-18 11:48:27&quot;);        System.out.println(date2);    &#125;</code></pre><h2 id="3、JDK8中新日期时间API"><a href="#3、JDK8中新日期时间API" class="headerlink" title="3、JDK8中新日期时间API"></a>3、JDK8中新日期时间API</h2><p><strong>新时间日期</strong>API</p><pre><code>java.time – 包含值对象的基础包java.time.chrono – 提供对不同的日历系统的访问java.time.format – 格式化和解析时间和日期java.time.temporal – 包括底层框架和扩展特性java.time.zone – 包含时区支持的类</code></pre><p>说明：大多数开发者只会用到基础包和format包，也可能会用到temporal包。因此，尽管有68个新的公开类型，大多数开发者，大概将只会用到其中的三分之一。</p><h3 id="LocalDate-LocalTime-LocalDateTime"><a href="#LocalDate-LocalTime-LocalDateTime" class="headerlink" title="LocalDate/LocalTime/LocalDateTime"></a>LocalDate/LocalTime/LocalDateTime</h3><p>LocalDate、LocalTime、LocalDateTime 类是其中较重要的几个类，它们的实例是不可变的对象，分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。</p><pre><code>LocalDate代表IOS格式（yyyy-MM-dd）的日期,可以存储 生日、纪念日等日期。LocalTime表示一个时间，而不是日期。 LocalDateTime是用来表示日期和时间的，这是一个最常用的类之一。</code></pre><p>注：ISO-8601日历系统是国际标准化组织制定的现代公民的日期和时间的表示法，也就是公历。</p><p><strong>对象创建的方法</strong></p><pre><code>now()now(ZoneId zone)静态方法，根据当前时间创建对象/指定时区的对象of()静态方法，根据指定日期/时间创建对象</code></pre><p><strong>时间的获取</strong></p><pre><code>静态方法，根据指定日期/时间创建对象getDayOfMonth()/getDayOfYear()获得月份天数(1-31) /获得年份天数(1-366)getDayOfWeek()获得星期几(返回一个 DayOfWeek 枚举值)getMonth()获得月份, 返回一个 Month 枚举值getMonthValue() / getYear()获得月份(1-12) /获得年份getHour()/getMinute()/getSecond()获得当前对象对应的小时、分钟、秒</code></pre><p><strong>时间的修改</strong></p><pre><code>withDayOfMonth()/withDayOfYear()withMonth()/withYear()将月份天数、年份天数、月份、年份修改为指定的值并返回新的对象</code></pre><p><strong>时间添加或者减少</strong></p><pre><code>plusDays(), plusWeeks()plusMonths(), plusYears(),plusHours()向当前对象添加几天、几周、几个月、几年、几小时minusMonths() / minusWeeks()minusDays()/minusYears()/minusHours() 从当前对象减去几月、几周、几天、几年、几小时</code></pre><pre><code class="java">    public void test1()&#123;        //now():获取当前的日期、时间、日期+时间        LocalDate localDate = LocalDate.now();        LocalTime localTime = LocalTime.now();        LocalDateTime localDateTime = LocalDateTime.now();        System.out.println(localDate);        System.out.println(localTime);        System.out.println(localDateTime);        //of():设置指定的年、月、日、时、分、秒。没有偏移量        LocalDateTime localDateTime1 = LocalDateTime.of(2020, 10, 6, 13, 23, 43);        System.out.println(localDateTime1);        //getXxx()：获取相关的属性        System.out.println(localDateTime.getDayOfMonth());        System.out.println(localDateTime.getDayOfWeek());        System.out.println(localDateTime.getMonth());        System.out.println(localDateTime.getMonthValue());        System.out.println(localDateTime.getMinute());        //体现不可变性        //withXxx():设置相关的属性        LocalDate localDate1 = localDate.withDayOfMonth(22);        System.out.println(localDate);        System.out.println(localDate1);        LocalDateTime localDateTime2 = localDateTime.withHour(4);        System.out.println(localDateTime);        System.out.println(localDateTime2);        //不可变性        LocalDateTime localDateTime3 = localDateTime.plusMonths(3);        System.out.println(localDateTime);        System.out.println(localDateTime3);        LocalDateTime localDateTime4 = localDateTime.minusDays(6);        System.out.println(localDateTime);        System.out.println(localDateTime4);    &#125;</code></pre><h3 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h3><p>瞬时：Instant</p><pre><code> Instant：时间线上的一个瞬时点。 这可能被用来记录应用程序中的事件时间戳。 在处理时间和日期的时候，我们通常会想到年,月,日,时,分,秒。然而，这只是时间的一个模型，是面向人类的。第二种通用模型是面向机器的，或者说是连续的。在此模型中，时间线中的一个点表示为一个很大的数，这有利于计算机处理。在UNIX中，这个数从1970年开始，以秒为的单位；同样的，在Java中，也是从1970年开始，但以毫秒为单位。 java.time包通过值类型Instant提供机器视图，不提供处理人类意义上的时间单位。Instant表示时间线上的一点，而不需要任何上下文信息，例如，时区。概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC）开始的秒数。因为java.time包是基于纳秒计算的，所以Instant的精度可以达到纳秒级。  (1 ns = 10-9 s) 1秒 = 1000毫秒 =10^6微秒=10^9纳秒</code></pre><pre><code>now()静态方法，返回默认UTC时区的Instant类的对象ofEpochMilli(long epochMilli)静态方法，返回在1970-01-01 00:00:00基础上加上指定毫秒数之后的Instant类的对象atOffset(ZoneOffset offset) 结合即时的偏移来创建一个 OffsetDateTimetoEpochMilli() 返回1970-01-01 00:00:00到当前时间的毫秒数，即为时间戳</code></pre><p><strong>Instant的使用（类似于 java.util.Date类）</strong></p><pre><code class="java">  public void test2()&#123;        //now():获取本初子午线对应的标准时间        Instant instant = Instant.now();        System.out.println(instant);//2019-02-18T07:29:41.719Z        //添加时间的偏移量        OffsetDateTime offsetDateTime = instant.atOffset(ZoneOffset.ofHours(8));        System.out.println(offsetDateTime);//2019-02-18T15:32:50.611+08:00        //toEpochMilli():获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数  ---&gt; Date类的getTime()        long milli = instant.toEpochMilli();        System.out.println(milli);        //ofEpochMilli():通过给定的毫秒数，获取Instant实例  --&gt;Date(long millis)        Instant instant1 = Instant.ofEpochMilli(1550475314878L);        System.out.println(instant1);    &#125;</code></pre><h3 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h3><p>java.time.format.DateTimeFormatter 类：该类提供了三种格式化方法：<br> 预定义的标准格式，如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME<br> 本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG)<br> 自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</p><pre><code>ofPattern(String pattern) 静态方法，返回一个指定字符串格式的DateTimeFormatterformat(TemporalAccessor t) 格式化一个日期、时间，返回字符串parse(CharSequence text) 将指定格式的字符序列解析为一个日期、时间</code></pre><p><strong>DateTimeFormatter:格式化或解析日期、时间</strong><br><strong>类似于SimpleDateFormat</strong></p><p> 方式一</p><pre><code class="JAVA">        //预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;        //格式化:日期--&gt;字符串        LocalDateTime localDateTime = LocalDateTime.now();        String str1 = formatter.format(localDateTime);        System.out.println(localDateTime);        System.out.println(str1);//2019-02-18T15:42:18.797        //解析：字符串 --&gt;日期        TemporalAccessor parse = formatter.parse(&quot;2019-02-18T15:42:18.797&quot;);        System.out.println(parse);</code></pre><p>方式二</p><pre><code class="java">         //本地化相关的格式。如：ofLocalizedDateTime()        //FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime        DateTimeFormatter formatter1 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);        //格式化        String str2 = formatter1.format(localDateTime);        System.out.println(str2);//2019年2月18日 下午03时47分16秒          //本地化相关的格式。如：ofLocalizedDate()         //FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate        DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);        //格式化        String str3 = formatter2.format(LocalDate.now());        System.out.println(str3);//2019-2-18</code></pre><h5 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h5><p>方式三</p><pre><code class="java">        //自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)        DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd hh:mm:ss&quot;);        //格式化        String str4 = formatter3.format(LocalDateTime.now());        System.out.println(str4);//2019-02-18 03:52:09        //解析        TemporalAccessor accessor = formatter3.parse(&quot;2019-02-18 03:52:09&quot;);        System.out.println(accessor);</code></pre><h2 id="4、Java比较器"><a href="#4、Java比较器" class="headerlink" title="4、Java比较器"></a>4、Java比较器</h2><p>Java实现对象排序的方式有两种：</p><p> <strong>自然排序：</strong>java.lang.Comparable</p><p> <strong>定制排序：</strong>java.util.Comparator</p><h3 id="Comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable接口</h3><pre><code>Comparable接口的使用举例：  自然排序1.像String、包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出了比较两个对象大小的方式。2.像String、包装类重写compareTo()方法以后，进行了从小到大的排列3. 重写compareTo(obj)的规则：    如果当前对象this大于形参对象obj，则返回正整数，    如果当前对象this小于形参对象obj，则返回负整数，    如果当前对象this等于形参对象obj，则返回零。4. 对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法。   在compareTo(obj)方法中指明如何排序</code></pre><h3 id="Comparator接口"><a href="#Comparator接口" class="headerlink" title="Comparator接口"></a>Comparator接口</h3><pre><code>Comparator接口的使用：定制排序1.背景：当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序2.重写compare(Object o1,Object o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</code></pre><pre><code>* 一、说明：Java中的对象，正常情况下，只能进行比较：==  或  != 。不能使用 &gt; 或 &lt; 的*          但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。*          如何实现？使用两个接口中的任何一个：Comparable 或 Comparator** 二、Comparable接口与Comparator的使用的对比：*    Comparable接口的方式一旦一定，保证Comparable接口实现类的对象在任何位置都可以比较大小。*    Comparator接口属于临时性的比较。</code></pre><h2 id="5、其他常用类"><a href="#5、其他常用类" class="headerlink" title="5、其他常用类"></a>5、其他常用类</h2><h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><p>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于java.lang包。</p><p>  由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便的进行调用。 </p><p><strong>成员变量</strong><br> System类内部包含in、out和err三个成员变量，分别代表标准输入流(键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)。</p><p><strong>成员方法</strong><br> <strong>native long currentTimeMillis()：</strong> 该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时间和GMT时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。<br> <strong>void exit(int status)：</strong> 该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。</p><p> **void gc()**：</p><p>该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则取决于系统中垃圾回收算法的实现以及系统执行时的情况。</p><p> **String getProperty(String key)**：</p><p>该方法的作用是获得系统中属性名为key的属性对应的值。系统中常见的属性名以及属性的作用如下表所示：</p><table><thead><tr><th>属性名</th><th>属性说明</th></tr></thead><tbody><tr><td>java.version</td><td>Java运行时环境版本</td></tr><tr><td>java.home</td><td>Java安装目录</td></tr><tr><td>os.name</td><td>操作系统的名称</td></tr><tr><td>os.version</td><td>操作系统的版本</td></tr><tr><td>user.name</td><td>用户的账户名称</td></tr><tr><td>user.home</td><td>用户的主目录</td></tr><tr><td>user.dir</td><td>用户的当前工作目录</td></tr></tbody></table><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><p>java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回值类型一般为double型。</p><pre><code>abs 绝对值acos,asin,atan,cos,sin,tan 三角函数sqrt 平方根pow(double a,doble b) a的b次幂log 自然对数exp e为底指数max(double a,double b)min(double a,double b)random() 返回0.0到1.0的随机数long round(double a) double型数据a转换为long型（四舍五入）toDegrees(double angrad) 弧度—&gt;角度toRadians(double angdeg) 角度—&gt;弧度</code></pre><h3 id="BigInteger与BigDecimal"><a href="#BigInteger与BigDecimal" class="headerlink" title="BigInteger与BigDecimal"></a>BigInteger与BigDecimal</h3><h4 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h4><p>Integer类作为int的包装类，能存储的最大整型值为$$2^{31}-1$$</p><p>Long类也是有限的最大为$$2^{63}-1$$</p><p>如果要表示再大的整数，不管是基本数据类型还是他们的包装类都无能为力，更不用说进行运算了。<br> java.math包的BigInteger可以表示不可变的任意精度的整数。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法.另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。<br> 构造器  BigInteger(String val)：根据字符串构建BigInteger对象</p><pre><code> public BigInteger abs()：返回此 BigInteger 的绝对值的 BigInteger。 BigInteger add(BigInteger val) ：返回其值为 (this + val) 的 BigInteger BigInteger subtract(BigInteger val) ：返回其值为 (this - val) 的 BigInteger BigInteger multiply(BigInteger val) ：返回其值为 (this * val) 的 BigInteger BigInteger divide(BigInteger val) ：返回其值为 (this / val) 的 BigInteger。整数相除只保留整数部分。  BigInteger remainder(BigInteger val) ：返回其值为 (this % val) 的 BigInteger。  BigInteger[] divideAndRemainder(BigInteger val)：返回包含 (this / val) 后跟(this % val) 的两个 BigInteger 的数组。  BigInteger pow(int exponent) ：返回其值为 (thisexponent) 的 BigInteger。</code></pre><p>BigDecimal</p><p>一般的Float类和Double类可以用来做科学计算或工程计算，但在商业计算中，要求数字精度比较高，故用到java.math.BigDecimal<em>类。</em></p><p>BigDecimal类支持不可变的、任意精度的有符号十进制定点数。 </p><p><strong>构造器</strong></p><pre><code> public BigDecimal(double val)  public BigDecimal(String val)</code></pre><p><strong>常用方法</strong></p><pre><code> public BigDecimal add(BigDecimal augend) public BigDecimal subtract(BigDecimal subtrahend) public BigDecimal multiply(BigDecimal multiplicand) public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</code></pre>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/Java/">Java</category>
      
      
      <comments>http://example.com/2021/09/26/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java多线程的学习</title>
      <link>http://example.com/2021/09/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AD%A6%E4%B9%A0/</link>
      <guid>http://example.com/2021/09/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AD%A6%E4%B9%A0/</guid>
      <pubDate>Sun, 26 Sep 2021 09:23:02 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Java多线程&quot;&gt;&lt;a href=&quot;#Java多线程&quot; class=&quot;headerlink&quot; title=&quot;Java多线程&quot;&gt;&lt;/a&gt;Java多线程&lt;/h1&gt;&lt;h3 id=&quot;多线程的创建方式一、继承Thread类&quot;&gt;&lt;a href=&quot;#多线程的创建方式一、继承Th</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h1><h3 id="多线程的创建方式一、继承Thread类"><a href="#多线程的创建方式一、继承Thread类" class="headerlink" title="多线程的创建方式一、继承Thread类"></a>多线程的创建方式一、继承Thread类</h3><p>1、创建一个继承于Thread类的子类</p><p>2、重写Thread类的Run方法</p><p>3、实例化一个Thread类子类的对象</p><p>4、通过对象调用start()方法</p><p>① 启动当前线程</p><p>② 调用当前线程的run()方法</p><pre><code class="java">//线程一//1、创建一个子类继承Thread类class  MyThread extends Thread&#123;    //2、重写run方法    @Override    public void run() &#123;        for (int i = 0; i &lt; 1000; i++) &#123;            System.out.println(i);        &#125;    &#125;&#125;public class ThreadTest1 &#123;    public static void main(String[] args) &#123;        //3、实例化创建多线程子类        MyThread mt=new MyThread();        //通过多线程子类对象调用start方法        mt.start();        //以下语句在主线程执行        for (int i = 0; i &lt; 1000; i++) &#123;            System.out.println(&quot;主线程： &quot;+i);        &#125;    &#125;&#125;</code></pre><h3 id="多线程的创建方式二、实现Runnable接口"><a href="#多线程的创建方式二、实现Runnable接口" class="headerlink" title="多线程的创建方式二、实现Runnable接口"></a>多线程的创建方式二、实现Runnable接口</h3><p>1、创建一个实现了Runnable接口的类</p><p>2、实现类去实现Runnable中的抽象方法：run()</p><p>3、创建实现类的对象</p><p>4、将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</p><p>5、通过Thread类的对象调用start()</p><p>① 启动线程 </p><p>② 调用当前线程的run()———&gt;调用了Runnable类型的target</p><pre><code class="java">//1、创建一个实现了Runnable接口的类class My_thread4 implements Runnable&#123;    //2、实现类去实现Runnable中的抽象方法：run()    @Override    public void run() &#123;        for (int i = 0; i &lt; 100; i++) &#123;            if(i%2==1) System.out.println(Thread.currentThread().getName()+&quot;: &quot;+i);        &#125;    &#125;&#125;public class ThreadText5 &#123;    public static void main(String[] args) &#123;        //3、创建实现类的对象        My_thread4 t4=new My_thread4();        //4、将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象        Thread thread1 = new Thread(t4);        thread1.setName(&quot;线程1 &quot;);        //5、通过Thread类的对象调用start();        //① 启动线程 ② 调用当前线程的run()———&gt;调用了Runnable类型的target        thread1.start();        //当用接口来实现创建线程时，多个线程执行一次run()，不需要写多个类        Thread thread2 = new Thread(t4);        thread2.setName(&quot;线程2 &quot;);        thread2.start();        //main线程        Thread.currentThread().setName(&quot;主线程 &quot;);        for (int i = 0; i &lt; 100; i++) &#123;            System.out.println(Thread.currentThread().getName()+&quot; &quot;+i);        &#125;    &#125;&#125;</code></pre><h3 id="多线程联系"><a href="#多线程联系" class="headerlink" title="多线程联系"></a>多线程联系</h3><pre><code class="java">//练习题//让线程1输出100以内的奇数，让线程2输出100以内的偶数public class ThreadTest2 &#123;    public static void main(String[] args) &#123;        //使用Thread匿名子类的方式创建线程(原因是只用一次，没必要专门写一个子类)        new Thread()        &#123;            @Override            public void run() &#123;                for (int i = 0; i &lt; 100; i++) &#123;                    if(i%2==1) System.out.println(Thread.currentThread().getName()+&quot;: &quot;+i);                &#125;            &#125;        &#125;.start();        new Thread()&#123;            @Override            public void run() &#123;                for (int i = 0; i &lt; 100; i++) &#123;                    if(i%2==0) System.out.println(Thread.currentThread().getName()+&quot;: &quot;+i);                &#125;            &#125;        &#125;.start();    &#125;&#125;</code></pre><h3 id="Thread中常用的方法"><a href="#Thread中常用的方法" class="headerlink" title="Thread中常用的方法:"></a><strong>Thread中常用的方法:</strong></h3><p>1.start()：启动当前线程，调用当前线程的run()</p><p>2.run():通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</p><p>3.currentThread()：静态方法，返回执行当前代码的线程</p><p>4.getName()：获取当前线程的名字</p><p>5.setName()：设置当前线程的名字</p><p>6.yield()：释放当前cpu的执行权</p><p>7.join()：在线程a中调用线程b的join()，此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程b才结束阻塞状态</p><p>8.sleep():让当前线程睡眠指定毫秒，在指定的毫秒内，当前线程是阻塞状态</p><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a><strong>线程优先级</strong></h3><p><strong>1、线程的优先级等级</strong></p><p>MAX_PRIORITY:10   最大优先级</p><p>MIN_PRIORITY:1      最小优先级</p><p>NORM_PRIORITY:5   默认优先级</p><p><strong>2、涉及的方法</strong></p><p>getPriority()：返回线程优先值</p><p>setPriority(int newPriority):改变线程的优先级</p><p><strong>3、说明</strong></p><p>线程创建时继承父线程的优先级</p><p>低优先级只是获得调度的概率低，并非一定是在高优先级线程之后执行</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/Java/">Java</category>
      
      
      <comments>http://example.com/2021/09/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AD%A6%E4%B9%A0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
